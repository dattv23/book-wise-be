// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  userId          String   @unique @map("user_id")
  email           String   @unique
  name            String
  phoneNumbers    String[] @default([]) @map("phone_numbers")
  addresses       String[] @default([]) @map("addresses")
  password        String
  role            Role     @default(USER)
  isEmailVerified Boolean  @default(false) @map("is_email_verified")
  isDeleted       Boolean  @default(false) @map("is_deleted")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  Token           Token[]
  Review          Review[]
  Order           Order[]

  @@map("users")
}

model Token {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  token       String
  type        TokenType
  expires     DateTime
  blacklisted Boolean
  createdAt   DateTime  @default(now()) @map("created_at")
  user        User      @relation(fields: [userId], references: [userId])
  userId      String    @map("user_id")

  @@map("tokens")
}

enum Role {
  USER
  ADMIN
}

enum TokenType {
  ACCESS
  REFRESH
  RESET_PASSWORD
  VERIFY_EMAIL
}

model Category {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  categoryId String   @unique @map("category_id")
  name       String
  slug       String   @unique
  Book       Book[]
  isDeleted  Boolean  @default(false) @map("is_deleted")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@map("categories")
}

type BookInfo {
  title         String
  author        String
  imageUrl      String @map("image_url")
  soldQuantity  Int    @map("sold_quantity")
  currentPrice  Int    @map("current_price")
  originalPrice Int    @map("original_price")
}

type BookDetails {
  publisher       String?   @map("publisher")
  publishingHouse String?   @map("publishing_house")
  bookVersion     String?   @map("book_version")
  publishDate     DateTime? @map("publish_date")
  dimensions      String?   @map("dimensions")
  translator      String?   @map("translator")
  coverType       String?   @map("cover_type")
  pageCount       String?   @map("page_count")
}

model Book {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  bookId      String      @unique @map("book_id")
  info        BookInfo
  details     BookDetails
  description String
  stock       Int         @default(0)
  reviews     Review[]
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  isDeleted   Boolean     @default(false) @map("is_deleted")
  Category    Category    @relation(fields: [categoryId], references: [categoryId])
  categoryId  String      @map("category_id")

  @@map("books")
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  rating    Int      @map("rating") // Rating out of 5
  comment   String?  @map("comment")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  isDeleted Boolean  @default(false) @map("is_deleted")
  user      User     @relation(fields: [userId], references: [userId])
  userId    String   @map("user_id")
  book      Book     @relation(fields: [bookId], references: [bookId])
  bookId    String   @map("book_id")

  @@map("reviews")
}

model Order {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  orderId       String        @unique @map("order_id")
  userId        String        @map("user_id")
  User          User          @relation(fields: [userId], references: [userId])
  items         OrderItem[]
  subTotal      Int           @map("sub_total")
  shippingCost  Int           @map("shipping_cost")
  total         Int
  address       String
  phoneNumber   String        @map("phone_number")
  paymentMethod PaymentMethod
  paymentStatus PaymentStatus @default(PENDING)
  status        OrderStatus   @default(PENDING)

  @@map("orders")
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  COMPLETED
  CANCELED
}

enum PaymentMethod {
  COD
  VN_PAY
}

type OrderItem {
  bookId   String @map("book_id")
  quantity Int
}
